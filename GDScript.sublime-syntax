%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: GDScript (Godot Engine)
file_extensions:
  - gd
scope: source.gdscript

variables:
  # todo: single underscore isn't allowed as var name (Godot bug?)
  identifier: \b[a-zA-Z_][a-zA-Z_0-9]*\b

contexts:
  prototype:
    - include: comments
    - include: line-continuation
  main:
    - match: ^(""")
      captures:
        1: punctuation.definition.comment.triple-quote.gdscript
      push:
        - meta_scope: comment.block.triple-quote
        - match: (""")
          captures:
            1: punctuation.definition.comment.triple-quote.gdscript
          pop: true
    - include: strings
    - match: '"""'
      push:
        - meta_scope: string.quoted.triple.gdscript
        - match: (?<!\\)"""
          pop: true
    - match: '@"'
      push:
        - meta_scope: string.quoted.double.node-path.gdscript
        - match: (?<!\\)"
          pop: true
    - match: \b(?i:0x\h*)\b
      scope: constant.numeric.integer.hexadecimal.gdscript
    - match: '\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))\b'
      scope: constant.numeric.float.gdscript
    - match: '\b(?i:(\.\d+(e[\-\+]?\d+)?))\b'
      scope: constant.numeric.float.gdscript
    - match: '\b(?i:(\d+e[\-\+]?\d+))\b'
      scope: constant.numeric.float.gdscript
    - match: \b\d+\b
      scope: constant.numeric.integer.gdscript
    - match: \b(?i:elif|else|for|if|while|break|continue|pass|return)\b
      scope: keyword.control.flow.gdscript
    - match: \b(?i:&&|and|in|is|!|not|\|\||or)\b
      scope: keyword.operator.logical.gdscript
    - match: <=|>=|==|<|>|!=
      scope: keyword.operator.comparison.gdscript
    - match: \+=|-=|\*=|/=|%=|&=|\|=|\*|/|%|\+|-|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic.gdscript
    - match: "="
      scope: keyword.operator.assignment.gdscript

    - include: builtin-types
    
    - match: '^\s*(?i:(class))\s+({{identifier}})\s*:'
      captures:
        1: storage.type.class.gdscript
        2: entity.name.type.class.gdscript

    - include: functions
    - include: signals

    - match: '(?i:\b(?:(onready)\s+)?(var))\s+({{identifier}})'
      captures:
        1: keyword.other.onready.gdscript
        2: storage.type.var.gdscript
        3: variable.other.gdscript
    - match: '\b(?i:(const))\s+({{identifier}})'
      captures:
        1: storage.type.const.gdscript
        2: variable.other.gdscript
    - match: '\b(?i:(enum))\s+({{identifier}})'
      captures:
        1: storage.type.enum.gdscript
        2: variable.other.gdscript
    - match: \b(?i:extends|assert|breakpoint)\b
      scope: keyword.other.gdscript
    - match: '(?<=extends)\s+{{identifier}}(\.({{identifier}}))?'
      scope: entity.other.inherited-class.gdscript
    - match: \b(?i:true|false|null)\b
      scope: constant.language.gdscript
    - match: \b(?i:export|tool)\b
      scope: storage.modifier.static.gdscript
    - match: '\b((?i:setget))\b\s+(?:,?({{identifier}})|({{identifier}})\s*,\s*({{identifier}}))'
      captures:
        1: keyword.operator.setget.gdscript
        2: entity.name.function.gdscript
        3: entity.name.function.gdscript
        4: entity.name.function.gdscript
    - match: \b(?i:yield)\b
      scope: keyword.control.flow.yield.gdscript
    - match: \b(?i:var|const|onready|enum|class|func|signal)\b
      scope: invalid.illegal
    - match: "([A-Z][a-zA-Z_0-9]*)"
      scope: entity.name.type.class-type.gdscript
    - match: "([a-z_][a-zA-Z_0-9]*)"
      scope: entity.name.type.variant.gdscript
    - match: '([a-z][a-zA-Z_0-9]*)\s*\('
      captures:
        1: entity.name.function.reference.gdscript
      push:
        - match: \)
          pop: true
        - match: "({{identifier}})"
          scope: variable.parameter.gdscript

  comments:
    - match: (#).*
      scope: comment.line.number-sign.gdscript
      captures:
        1: punctuation.definition.comment.number-sign.gdscript

  strings:
    # todo: other character escapes
    # todo: sprintf language
    - match: \"
      scope: punctuation.definition.string.begin.gdscript
      push:
        - meta_scope: meta.string.gdscript string.quoted.double.gdscript
        - meta_include_prototype: false
        - match: \\\"
          scope: constant.character.escape.gdscript
        - match: \"
          scope: punctuation.definition.string.end.gdscript
          pop: true
    - match: \'
      scope: punctuation.definition.string.begin.gdscript
      push:
        - meta_scope: meta.string.gdscript string.quoted.double.gdscript
        - meta_include_prototype: false
        - match: \\\'
          scope: constant.character.escape.gdscript
        - match: \'
          scope: punctuation.definition.string.end.gdscript
          pop: true

  builtin-types:
    # It's debateable whether these "built-in types" should be categorized as ``storage`` or
    # ``support``. I chose storage because the default color scheme differentiates it from
    # support and that's useful because things descended from Object get instantiated by
    # calling ``new()``, but these don't
    #
    # https://docs.godotengine.org/en/3.1/getting_started/scripting/gdscript/gdscript_basics.html#built-in-types
    - match: \b(?:bool|int|float|String|funcref)\b
      scope: storage.type.basic.gdscript
    - match: '\b(?:Vector[23]|Rect2|Matrix32?|Plane|Quat|AABB|Transform)\b'
      scope: storage.type.vector.gdscript
    - match: \b(?:Color|Image|NodePath|RID|Object|InputEvent)\b
      scope: storage.type.engine.gdscript
    - match: '\b(Array|Dictionary|ByteArray|IntArray|FloatArray|StringArray|Vector[23]Array|ColorArray)\b'
      scope: storage.type.container.gdscript

  functions:
    - match: \b(?:(static|remote|sync|master|slave)\s+)?(func)\b
      captures:
        1: storage.modifier.gdscript
        2: storage.type.function.gdscript
      push:
        - meta_scope: meta.function.gdscript
        - match: '{{identifier}}'
          scope: entity.name.function.gdscript
        - match: (?=\()
          set:
            # todo: typed params
            - meta_scope: meta.function.parameters.gdscript
            - match: \(
              scope: punctuation.section.parameters.begin.gdscript
            - match: '{{identifier}}'
              scope: variable.parameter.gdscript
            - match: ','
              scope: punctuation.separator.parameters.gdscript
            - match: \)
              scope: punctuation.section.parameters.end.gdscript
              set:
                - meta_scope: meta.function.gdscript
                - include: start-func-body
                - match: ->
                  scope: keyword.operator.arrow.forward.gdscript
                  set: 
                    - meta_scope: meta.function.return-type
                    - include: start-func-body
                    - include: builtin-types
                    - match: '{{identifier}}'
                      scope: support.class.gdscript

  start-func-body:
    - match: ':'
      scope: punctuation.section.function.begin.gdscript
      pop: true

  signals:
    - match: \bsignal\b
      scope: storage.type.signal.gdscript
      push:
        # todo: line continuations (see functions)
        - meta_scope: meta.signal.gdscript
        - match: '{{identifier}}'
          scope: entity.name.signal.gdscript
        - match: $
          pop: true
        - match: (?=\()
          set:
            - meta_scope: meta.signal.parameters.gdscript
            - match: \(
              scope: punctuation.section.parameters.begin.gdscript
            - match: '{{identifier}}'
              scope: variable.parameter.gdscript
            - match: ','
              scope: punctuation.separator.parameters.gdscript
            - match: \)
              scope: punctuation.section.parameters.end.gdscript
              pop: true

  line-continuation:
    # From Sublime's built-in Python syntax, with slight modification
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.gdscript
        2: invalid.illegal.unexpected-text.gdscript
    # Python syntax has special handling for docstrings here
