{
  "scope": "source.gdscript",
  "completions": [
    {
      "trigger": "basename()",
      "contents": "basename()"
    },
    {
      "trigger": "begins_with(text)",
      "contents": "begins_with(${1:text})"
    },
    {
      "trigger": "capitalize()",
      "contents": "capitalize()"
    },
    {
      "trigger": "casecmp_to(to)",
      "contents": "casecmp_to(${1:to})"
    },
    {
      "trigger": "empty()",
      "contents": "empty()"
    },
    {
      "trigger": "extension()",
      "contents": "extension()"
    },
    {
      "trigger": "find(what, from)",
      "contents": "find(${1:what}, ${2:from})"
    },
    {
      "trigger": "find_last(what)",
      "contents": "find_last(${1:what})"
    },
    {
      "trigger": "findn(what, from)",
      "contents": "findn(${1:what}, ${2:from})"
    },
    {
      "trigger": "get_base_dir()",
      "contents": "get_base_dir()"
    },
    {
      "trigger": "get_file()",
      "contents": "get_file()"
    },
    {
      "trigger": "hash()",
      "contents": "hash()"
    },
    {
      "trigger": "hex_to_int()",
      "contents": "hex_to_int()"
    },
    {
      "trigger": "insert(pos, what)",
      "contents": "insert(${1:pos}, ${2:what})"
    },
    {
      "trigger": "is_abs_path()",
      "contents": "is_abs_path()"
    },
    {
      "trigger": "is_rel_path()",
      "contents": "is_rel_path()"
    },
    {
      "trigger": "is_valid_float()",
      "contents": "is_valid_float()"
    },
    {
      "trigger": "is_valid_html_color()",
      "contents": "is_valid_html_color()"
    },
    {
      "trigger": "is_valid_identifier()",
      "contents": "is_valid_identifier()"
    },
    {
      "trigger": "is_valid_integer()",
      "contents": "is_valid_integer()"
    },
    {
      "trigger": "is_valid_ip_address()",
      "contents": "is_valid_ip_address()"
    },
    {
      "trigger": "left(pos)",
      "contents": "left(${1:pos})"
    },
    {
      "trigger": "length()",
      "contents": "length()"
    },
    {
      "trigger": "match(expr)",
      "contents": "match(${1:expr})"
    },
    {
      "trigger": "matchn(expr)",
      "contents": "matchn(${1:expr})"
    },
    {
      "trigger": "md5_buffer()",
      "contents": "md5_buffer()"
    },
    {
      "trigger": "md5_text()",
      "contents": "md5_text()"
    },
    {
      "trigger": "nocasecmp_to(to)",
      "contents": "nocasecmp_to(${1:to})"
    },
    {
      "trigger": "ord_at(at)",
      "contents": "ord_at(${1:at})"
    },
    {
      "trigger": "pad_decimals(digits)",
      "contents": "pad_decimals(${1:digits})"
    },
    {
      "trigger": "pad_zeros(digits)",
      "contents": "pad_zeros(${1:digits})"
    },
    {
      "trigger": "percent_decode()",
      "contents": "percent_decode()"
    },
    {
      "trigger": "percent_encode()",
      "contents": "percent_encode()"
    },
    {
      "trigger": "plus_file(file)",
      "contents": "plus_file(${1:file})"
    },
    {
      "trigger": "replace(what, forwhat)",
      "contents": "replace(${1:what}, ${2:forwhat})"
    },
    {
      "trigger": "replacen(what, forwhat)",
      "contents": "replacen(${1:what}, ${2:forwhat})"
    },
    {
      "trigger": "rfind(what, from)",
      "contents": "rfind(${1:what}, ${2:from})"
    },
    {
      "trigger": "rfindn(what, from)",
      "contents": "rfindn(${1:what}, ${2:from})"
    },
    {
      "trigger": "right(pos)",
      "contents": "right(${1:pos})"
    },
    {
      "trigger": "split(divisor, allow_empty)",
      "contents": "split(${1:divisor}, ${2:allow_empty})"
    },
    {
      "trigger": "split_floats(divisor, allow_empty)",
      "contents": "split_floats(${1:divisor}, ${2:allow_empty})"
    },
    {
      "trigger": "strip_edges()",
      "contents": "strip_edges()"
    },
    {
      "trigger": "substr(from, len)",
      "contents": "substr(${1:from}, ${2:len})"
    },
    {
      "trigger": "to_float()",
      "contents": "to_float()"
    },
    {
      "trigger": "to_int()",
      "contents": "to_int()"
    },
    {
      "trigger": "to_lower()",
      "contents": "to_lower()"
    },
    {
      "trigger": "to_upper()",
      "contents": "to_upper()"
    },
    {
      "trigger": "xml_escape()",
      "contents": "xml_escape()"
    },
    {
      "trigger": "xml_unescape()",
      "contents": "xml_unescape()"
    }
  ]
}