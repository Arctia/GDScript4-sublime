{
  "scope": "source.gdscript",
  "completions": [
    {
      "trigger": "encloses(with)",
      "contents": "encloses(${1:with})"
    },
    "encloses",
    {
      "trigger": "expand(to_point)",
      "contents": "expand(${1:to_point})"
    },
    "expand",
    {
      "trigger": "get_area()",
      "contents": "get_area()"
    },
    "get_area",
    {
      "trigger": "get_endpoint(idx)",
      "contents": "get_endpoint(${1:idx})"
    },
    "get_endpoint",
    {
      "trigger": "get_longest_axis()",
      "contents": "get_longest_axis()"
    },
    "get_longest_axis",
    {
      "trigger": "get_longest_axis_index()",
      "contents": "get_longest_axis_index()"
    },
    "get_longest_axis_index",
    {
      "trigger": "get_longest_axis_size()",
      "contents": "get_longest_axis_size()"
    },
    "get_longest_axis_size",
    {
      "trigger": "get_shortest_axis()",
      "contents": "get_shortest_axis()"
    },
    "get_shortest_axis",
    {
      "trigger": "get_shortest_axis_index()",
      "contents": "get_shortest_axis_index()"
    },
    "get_shortest_axis_index",
    {
      "trigger": "get_shortest_axis_size()",
      "contents": "get_shortest_axis_size()"
    },
    "get_shortest_axis_size",
    {
      "trigger": "get_support(dir)",
      "contents": "get_support(${1:dir})"
    },
    "get_support",
    {
      "trigger": "grow(by)",
      "contents": "grow(${1:by})"
    },
    "grow",
    {
      "trigger": "has_no_area()",
      "contents": "has_no_area()"
    },
    "has_no_area",
    {
      "trigger": "has_no_surface()",
      "contents": "has_no_surface()"
    },
    "has_no_surface",
    {
      "trigger": "has_point(point)",
      "contents": "has_point(${1:point})"
    },
    "has_point",
    {
      "trigger": "intersection(with)",
      "contents": "intersection(${1:with})"
    },
    "intersection",
    {
      "trigger": "intersects(with)",
      "contents": "intersects(${1:with})"
    },
    "intersects",
    {
      "trigger": "intersects_plane(plane)",
      "contents": "intersects_plane(${1:plane})"
    },
    "intersects_plane",
    {
      "trigger": "intersects_segment(from, to)",
      "contents": "intersects_segment(${1:from}, ${2:to})"
    },
    "intersects_segment",
    {
      "trigger": "merge(with)",
      "contents": "merge(${1:with})"
    },
    "merge",
    {
      "trigger": "AABB(pos, size)",
      "contents": "AABB(${1:pos}, ${2:size})"
    }
  ]
}